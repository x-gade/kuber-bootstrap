import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import json
import subprocess
import fcntl
from datetime import datetime, timedelta
from utils.logger import log
from data.collected_info import IP, HOSTNAME

CERT_INFO_FILE = "certs/cert_info.json"
RENEW_THRESHOLD_DAYS = 30
CERT_DURATION_DAYS = 365
CA_CERT = "/etc/kubernetes/pki/ca.crt"
CA_KEY = "/etc/kubernetes/pki/ca.key"
LOCK_PATH = "/var/lock/renew_certs.lock"

def acquire_lock():
    lockfile = open(LOCK_PATH, 'w')
    try:
        fcntl.flock(lockfile, fcntl.LOCK_EX | fcntl.LOCK_NB)
        return lockfile
    except BlockingIOError:
        log("üîí –î—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ—Å—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–æ—Ç–∞—Ü–∏—é —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤", "warn")
        sys.exit(0)

def write_openssl_cnf(cn):
    path = f"/tmp/openssl_{cn}.cnf"
    with open(path, "w") as f:
        f.write(f"""
[ req ]
prompt = no
distinguished_name = dn
x509_extensions = v3_req
req_extensions = v3_req

[ dn ]
CN = {cn}

[ v3_req ]
subjectAltName = @alt_names

[ alt_names ]
DNS.1 = {cn}
DNS.2 = {HOSTNAME}
IP.1 = 127.0.0.1
IP.2 = {IP}
""")
    return path

def get_cert_dates(path):
    try:
        out = subprocess.check_output(["openssl", "x509", "-in", path, "-noout", "-dates"]).decode()
        lines = dict(line.split("=", 1) for line in out.strip().splitlines())
        not_before = datetime.strptime(lines["notBefore"], "%b %d %H:%M:%S %Y %Z")
        not_after = datetime.strptime(lines["notAfter"], "%b %d %H:%M:%S %Y %Z")
        return not_before, not_after
    except Exception as e:
        log(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞—Ç—ã –∏–∑ {path}: {e}", "error")
        return None, None

def validate_key_pair(cert_path, key_path):
    try:
        cert_mod = subprocess.check_output(["openssl", "x509", "-in", cert_path, "-noout", "-modulus"]).strip()
        key_mod = subprocess.check_output(["openssl", "rsa", "-in", key_path, "-noout", "-modulus"]).strip()
        return cert_mod == key_mod
    except Exception as e:
        log(f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—ã –∫–ª—é—á+—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}", "warn")
        return False

def renew_certificate(name, path):
    log(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {name}", "warn")
    try:
        key_path = path.replace(".crt", ".key")
        csr_path = f"/tmp/{name}.csr"
        cnf_path = write_openssl_cnf(name)

        subprocess.run(["openssl", "genrsa", "-out", key_path, "2048"], check=True)
        subprocess.run(["openssl", "req", "-new", "-key", key_path, "-out", csr_path, "-config", cnf_path], check=True)
        subprocess.run([
            "openssl", "x509", "-req", "-in", csr_path,
            "-CA", CA_CERT, "-CAkey", CA_KEY,
            "-CAcreateserial",
            "-out", path, "-days", str(CERT_DURATION_DAYS),
            "-extensions", "v3_req", "-extfile", cnf_path
        ], check=True)

        os.remove(csr_path)
        os.remove(cnf_path)
        return True
    except subprocess.CalledProcessError as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {name}: {e}", "error")
        return False

def restart_service_if_needed(name):
    if "etcd" in name:
        os.system("systemctl restart etcd")
        log("–ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω etcd", "ok")
    elif "apiserver" in name:
        os.system("systemctl restart kube-apiserver")
        log("–ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω kube-apiserver", "ok")

def check_and_renew():
    if not os.path.exists(CERT_INFO_FILE):
        log(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {CERT_INFO_FILE}", "error")
        return

    with open(CERT_INFO_FILE, "r") as f:
        certs = json.load(f)

    now = datetime.utcnow()
    changed = False

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è CA
    ca_not_before, ca_not_after = get_cert_dates(CA_CERT)
    if not ca_not_after:
        log("‚õîÔ∏è CA –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –æ—Ç–º–µ–Ω–∞ —Ä–æ—Ç–∞—Ü–∏–∏", "error")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è CA –∏–∑ cert_info.json (–µ—Å–ª–∏ –µ—Å—Ç—å)
    cert_ca_date_str = certs.get("ca", {}).get("expires_at")
    if cert_ca_date_str:
        try:
            cert_ca_date = datetime.strptime(cert_ca_date_str, "%Y-%m-%dT%H:%M:%SZ")
        except:
            cert_ca_date = ca_not_after
    else:
        log("‚ö†Ô∏è CA –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ cert_info.json, —á–∏—Ç–∞—é —Å –¥–∏—Å–∫–∞", "warn")
        cert_ca_date = ca_not_after

    if (ca_not_after - now).days < RENEW_THRESHOLD_DAYS:
        log("‚ö†Ô∏è CA —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë", "warn")

    for name, cert in certs.items():
        if cert.get("expires_at") == "n/a":
            log(f"{name}: –±–µ–∑ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è", "info")
            continue

        needs_renewal = False
        try:
            expires = datetime.strptime(cert["expires_at"], "%Y-%m-%dT%H:%M:%SZ")
            days_left = (expires - now).days
        except Exception:
            _, expires = get_cert_dates(cert["path"])
            days_left = (expires - now).days if expires else -1

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
        if cert.get("signed_by") == "ca" and cert_ca_date != ca_not_after:
            log(f"üìõ {name}: –ø–æ–¥–ø–∏—Å–∞–Ω —Å—Ç–∞—Ä—ã–º CA, —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", "warn")
            needs_renewal = True

        if days_left <= 0:
            log(f"‚õîÔ∏è {name}: —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç—ë–∫!", "error")
            needs_renewal = True
        elif days_left <= RENEW_THRESHOLD_DAYS:
            log(f"‚ö†Ô∏è {name}: –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π", "warn")
            needs_renewal = True
        else:
            log(f"{name}: –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π", "info")

        if not needs_renewal:
            continue

        if renew_certificate(name, cert["path"]):
            new_from, new_to = get_cert_dates(cert["path"])
            key_path = cert["path"].replace(".crt", ".key")
            if new_from and new_to and validate_key_pair(cert["path"], key_path):
                cert["created_at"] = new_from.strftime("%Y-%m-%dT%H:%M:%SZ")
                cert["expires_at"] = new_to.strftime("%Y-%m-%dT%H:%M:%SZ")
                cert["signed_by"] = "ca"
                restart_service_if_needed(name)
                log(f"‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω: {name}", "ok")
                changed = True
            else:
                log(f"‚ö†Ô∏è –û–±–Ω–æ–≤–ª—ë–Ω, –Ω–æ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–ª—é—á–æ–º: {name}", "warn")

    if changed:
        os.rename(CERT_INFO_FILE, CERT_INFO_FILE + ".bak")
        with open(CERT_INFO_FILE, "w") as f:
            json.dump(certs, f, indent=2)
        log("üìò cert_info.json –æ–±–Ω–æ–≤–ª—ë–Ω", "ok")
    else:
        log("üîÑ –í—Å–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ –ø–æ—Ä—è–¥–∫–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è", "ok")


if __name__ == "__main__":
    log("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ ===", "info")
    lock = acquire_lock()
    check_and_renew()
