/kuber-bootstrap
│
├── cluster/                            # Скрипты управления состоянием кластера
│   ├── sync_cluster_state.py           # Сканирование, пинг и учёт активных узлов
│   ├── rotate_cluster_certs.py         # Ротация всех сертификатов во всех нодах
│   └── force_cluster_restart.py        # Ручной безопасный перезапуск ключевых компонентов
│
├── setup/
│   ├── install_dependencies.py         # Установка всех нужных пакетов
│   ├── check_binaries.py               # Проверка наличия etcd, kubeadm и пр.
│   └── install_binaries.py             # Скачивание бинарников при отсутствии
│
├── certs/
│   ├── generate_all.py                 # Генерация всех сертификатов с log и сроком
│   ├── renew_certs.py                  # Автоматическая проверка сроков и обновление
│   └── cert_info.json                  # Сроки действия всех сертификатов
│
├── systemd/
│   ├── generate_etcd_service.py        # Генерация и запуск etcd как systemd unit
│   └── generate_apiserver_service.py   # (опционально) запуск API-сервера как unit
│
├── kubeadm/
│   ├── create_certificates.py          # Генерация всех TLS-ключей
│   ├── generate_kubeadm_config.py      # kubeadm-config.yaml
│   └── run_kubeadm_init.py             # kubeadm init без etcd
│
├── post/
│   ├── apply_cni.py                    # Установка CNI (Flannel, Cilium)
│   ├── patch_controller_flags.py       # Установка флагов (например, cluster-cidr)
│   └── join_nodes.py                   # Скрипт генерации `kubeadm join`
│
├── utils/
│   ├── logger.py                       # Цветной логгер
│   ├── shell.py                        # Универсальный обёртка над `subprocess`
│   ├── cert_helpers.py                 # Функции для анализа .crt/.key
│   └── validator.py                    # Проверка конфигов и путей
│
├── data/
│   ├── required_binaries.yaml	        # Список бинарников и версий (опц.)
│   ├── missing_binaries.json	        # Результат проверки — что надо доустановить
│   └── collected_info.json	        # Данные о ноде
│
├── logs/
│   ├── bootstrap.log	                # Централизованный лог всех шагов
│   └──                                 # Возможые другие логи
│
│
├── collect_node_info.py                # Собирает данные о машине, создавет collected_info.json и хранит собранные данные в нем 
│
└── main.py                             # Точка входа — orchestrator
